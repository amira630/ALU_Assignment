Coverage Report by instance with details

=================================================================================
=== Instance: /alu_tb/DUT
=== Design Unit: work.alu
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        22        18         4    81.81%

================================Branch Details================================

Branch Coverage for instance /alu_tb/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu.v
------------------------------------IF Branch------------------------------------
    23                                      1015     Count coming in to IF
    23              1                         24     if(reset == 0) begin
    30              1                        991     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    32                                       991     Count coming in to IF
    32              1                         81     if(ctl == 4'b1001) begin       
    35              1                         82     else if(ctl == 4'b0110) begin  
    38              1                        828     else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    41                                       991     Count coming in to IF
    41              1                        885     if(valid_in) begin
                                             106     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    52                                      1002     Count coming in to CASE
    53              1                         84     4'b0000: alu_out=a;                                
    54              1                         84     4'b0001: alu_out=b+4'b0001 ;                        
    55              1                         84     4'b0010: alu_out=b-4'b0001 ;                        
    56              1                         83     4'b0011: alu_out=a+b;                              
    57              1                         84     4'b0100: alu_out=a+b+cin;                           
    58              1                         83     4'b0101: alu_out=a-b+1 ;                            
    59              1                         83     4'b0110: alu_out=a-b+(~cin);                       
    60              1                         83     4'b0111: alu_out=a&b;                              
    61              1                         83     4'b1000: alu_out=a|b;                              
    62              1                         84     4'b1001: alu_out=a^b;                              
    63              1                    ***0***     4'b1010: alu_out={b[3:0],1'b1};                    
    64              1                    ***0***     4'b1011: alu_out={b[0],1'b0,b[3:1]};                
    65              1                    ***0***     4'b1100: alu_out={b[3:0],cin};                     
    66              1                    ***0***     4'b1101: alu_out={b[0],cin,b[3:1]};                
    67              1                        167     default : begin 
Branch totals: 11 hits of 15 branches = 73.33%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /alu_tb/DUT --

  File alu.v
----------------Focused Condition View-------------------
Line       32 Item    1  (ctl == 9)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  (ctl == 9)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ctl == 9)_0          -                             
  Row   2:          1  (ctl == 9)_1          -                             

----------------Focused Condition View-------------------
Line       35 Item    1  (ctl == 6)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  (ctl == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ctl == 6)_0          -                             
  Row   2:          1  (ctl == 6)_1          -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      4         4         0   100.00%

================================Expression Details================================

Expression Coverage for instance /alu_tb/DUT --

  File alu.v
----------------Focused Expression View-----------------
Line       76 Item    1  (((a4[0] | a4[1]) | a4[2]) | a4[3])
Expression totals: 4 of 4 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       a4[0]         Y
       a4[1]         Y
       a4[2]         Y
       a4[3]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  a4[0]_0               (~a4[3] && ~a4[2] && ~a4[1])  
  Row   2:          1  a4[0]_1               (~a4[3] && ~a4[2] && ~a4[1])  
  Row   3:          1  a4[1]_0               (~a4[3] && ~a4[2] && ~a4[0])  
  Row   4:          1  a4[1]_1               (~a4[3] && ~a4[2] && ~a4[0])  
  Row   5:          1  a4[2]_0               (~a4[3] && ~(a4[0] | a4[1]))  
  Row   6:          1  a4[2]_1               (~a4[3] && ~(a4[0] | a4[1]))  
  Row   7:          1  a4[3]_0               ~((a4[0] | a4[1]) | a4[2])    
  Row   8:          1  a4[3]_1               ~((a4[0] | a4[1]) | a4[2])    


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      32        28         4    87.50%

================================Statement Details================================

Statement Coverage for instance /alu_tb/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu.v
    1                                                module alu( 
    2                                                //Input signals
    3                                                input            clk,
    4                                                input            reset,
    5                                                input            valid_in,    //validate input signals
    6                                                input [3:0]      a,           //port A
    7                                                input [3:0]      b,           //port B 
    8                                                input            cin,         //carry input from carry flag register 
    9                                                input [3:0]      ctl,         //functionality control for ALU 
    10                                               //Output signals
    11                                               output reg       valid_out,   //validate output signals
    12                                               output reg [3:0] alu,         //the result 
    13                                               output reg       carry,       //carry output 
    14                                               output reg       zero         //zero output 
    15                                               );
    16                                               
    17                                               wire [4:0] result; 
    18                                               wire       zero_result;
    19                                               reg valid_out_R;
    20              1                       1002     assign result = alu_out(a,b,cin,ctl); 
    21              1                        952     assign zero_result = z_flag(result); 
    22              1                       1015     always@(posedge clk, negedge reset) begin
    23                                               if(reset == 0) begin
    24              1                         24     valid_out_R <= 0;
    25              1                         24     valid_out   <= 0;
    26              1                         24     alu         <= 0;
    27              1                         24     carry       <= 0; 
    28              1                         24     zero        <= 0;
    29                                               end
    30                                               else begin
    31              1                        991     valid_out_R <= valid_in;
    32                                               if(ctl == 4'b1001) begin       
    33              1                         81     valid_out <= ~valid_in;
    34                                               end
    35                                               else if(ctl == 4'b0110) begin  
    36              1                         82     valid_out <= valid_out_R;
    37                                               end
    38                                               else begin
    39              1                        828     valid_out <= valid_in;
    40                                               end
    41                                               if(valid_in) begin
    42              1                        885     alu   <= result[3:0]; 
    43              1                        885     carry <= result[4]; 
    44              1                        885     zero  <= zero_result; 
    45                                               end
    46                                               end
    47                                               end
    48                                               function [4:0] alu_out; 
    49                                               input [3:0] a,b ; 
    50                                               input cin ; 
    51                                               input [3:0] ctl ; 
    52                                               case ( ctl ) 
    53              1                         84     4'b0000: alu_out=a;                                
    54              1                         84     4'b0001: alu_out=b+4'b0001 ;                        
    55              1                         84     4'b0010: alu_out=b-4'b0001 ;                        
    56              1                         83     4'b0011: alu_out=a+b;                              
    57              1                         84     4'b0100: alu_out=a+b+cin;                           
    58              1                         83     4'b0101: alu_out=a-b+1 ;                            
    59              1                         83     4'b0110: alu_out=a-b+(~cin);                       
    60              1                         83     4'b0111: alu_out=a&b;                              
    61              1                         83     4'b1000: alu_out=a|b;                              
    62              1                         84     4'b1001: alu_out=a^b;                              
    63              1                    ***0***     4'b1010: alu_out={b[3:0],1'b1};                    
    64              1                    ***0***     4'b1011: alu_out={b[0],1'b0,b[3:1]};                
    65              1                    ***0***     4'b1100: alu_out={b[3:0],cin};                     
    66              1                    ***0***     4'b1101: alu_out={b[0],cin,b[3:1]};                
    67                                               default : begin 
    68              1                        167     alu_out=9'bxxxxxxxxx; 
    69              1                        167     $display("Illegal CTL detected!!"); 
    70                                               end 
    71                                               endcase 
    72                                               endfunction  
    73                                               function z_flag ; 
    74                                               input [4:0] a4 ; 
    75                                               begin 
    76              1                        952     z_flag = ^(a4[0]|a4[1]|a4[2]|a4[3]) ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        60         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alu_tb/DUT --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            a[0-3]           1           1                              100.00 
                                          alu[0-3]           1           1                              100.00 
                                            b[0-3]           1           1                              100.00 
                                             carry           1           1                              100.00 
                                               cin           1           1                              100.00 
                                               clk           1           1                              100.00 
                                          ctl[0-3]           1           1                              100.00 
                                             reset           1           1                              100.00 
                                       result[0-4]           1           1                              100.00 
                                          valid_in           1           1                              100.00 
                                         valid_out           1           1                              100.00 
                                       valid_out_R           1           1                              100.00 
                                              zero           1           1                              100.00 
                                       zero_result           1           1                              100.00 

Total Node Count     =         30 
Toggled Node Count   =         30 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (60 of 60 bins)

=================================================================================
=== Instance: /alu_tb/DUT_G
=== Design Unit: work.alu_ref
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        25        19         6    76.00%

================================Branch Details================================

Branch Coverage for instance /alu_tb/DUT_G
NOTE: The modification timestamp for source file 'alu_ref.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu_ref.sv
------------------------------------IF Branch------------------------------------
    25                                      1012     Count coming in to IF
    25              1                         24         if(~reset) begin
    31              1                        988         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    33                                       988     Count coming in to IF
    33              1                        883             if(valid_in) begin
                                             105     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    43                                      1001     Count coming in to CASE
    44              1                         84             SEL:      out_r = b;
    45              1                         84             INC: begin 
    46              1                         84                 if (b < 4'hf) 
    47              1                         83                     out_r = b + 1; 
    48              1                         84                 else 
    49              1                         83                     out_r = b; 
    50              1                         83             end
    51              1                         83             DEC: begin 
    52              1                         83                 if (b > 0) 
    53              1                         84                     out_r = b - 1; 
    54              1                    ***0***                 else 
    55              1                    ***0***                     out_r = b; 
    56              1                    ***0***             end
    57              1                    ***0***             ADD:      out_r = a + b;
    58              1                        166             ADD_c:    out_r = a + b + cin;
Branch totals: 11 hits of 15 branches = 73.33%

------------------------------------IF Branch------------------------------------
    45                                        84     Count coming in to IF
    45              2                         84             INC: begin 
    45              3                    ***0***             INC: begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    46                                        84     Count coming in to IF
    46              2                         84                 if (b < 4'hf) 
    46              3                    ***0***                 if (b < 4'hf) 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    60                                      1001     Count coming in to IF
    60              1                        862             SUB_b:    out_r = a - b - cin;
    62              1                        139             OR:       out_r = a | b;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alu_tb/DUT_G --
NOTE: The modification timestamp for source file 'alu_ref.sv' has been altered since compilation.

  File alu_ref.sv
----------------Focused Condition View-------------------
Line       45 Item    1  (b < 15)
Condition totals: 0 of 1 input term covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (b < 15)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (b < 15)_0            -                             
  Row   2:          1  (b < 15)_1            -                             

----------------Focused Condition View-------------------
Line       46 Item    1  (b > 0)
Condition totals: 0 of 1 input term covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
     (b > 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (b > 0)_0             -                             
  Row   2:          1  (b > 0)_1             -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      31        25         6    80.64%

================================Statement Details================================

Statement Coverage for instance /alu_tb/DUT_G --
NOTE: The modification timestamp for source file 'alu_ref.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu_ref.sv
    3                                                module alu_ref(
    4                                                    input            clk,
    5                                                    input            reset,
    6                                                    input            valid_in,    //validate input signals
    7                                                    input [3:0]      a,           //port A
    8                                                    input [3:0]      b,           //port B 
    9                                                    input            cin,         //carry input from carry flag register 
    10                                                   input [3:0]      ctl,         //functionality control for ALU 
    11                                                   //Output signals
    12                                                   output reg       valid_out,   //validate output signals
    13                                                   output reg [3:0] alu,         //the result 
    14                                                   output reg       carry,       //carry output 
    15                                                   output reg       zero         //zero output 
    16                                               );
    17                                               
    18                                               opcode_e opcode;
    19                                               reg [4:0] out_r;
    20                                               reg valid_r, zero_r;
    21                                               
    22              1                        999     assign opcode = opcode_e'(ctl);
    23                                               
    24              1                       1012     always @(posedge clk or negedge reset) begin
    25                                                   if(~reset) begin
    26              1                         24             valid_out <= 1'b0;
    27              1                         24             alu <= 4'b0;
    28              1                         24             carry <= 1'b0;
    29              1                         24             zero <= 1'b0;
    30                                                   end
    31                                                   else begin 
    32              1                        988             valid_out <= valid_r;
    33                                                       if(valid_in) begin
    34              1                        883                 alu   <= out_r[3:0];
    35              1                        883                 carry <= out_r[4];
    36              1                        883                 zero  <= zero_r;
    37                                                       end
    38                                                   end
    39                                               end
    40                                               
    41              1                       1001     always @(*) begin
    42              1                       1001         valid_r = valid_in;
    43                                                   case (opcode)
    44              1                         84             SEL:      out_r = b;
    45              1                         84             INC: begin 
    45              2                    ***0***     
    46              1                         84                 if (b < 4'hf) 
    46              2                    ***0***     
    47              1                         83                     out_r = b + 1; 
    48              1                         84                 else 
    49              1                         83                     out_r = b; 
    50              1                         83             end
    51              1                         83             DEC: begin 
    52              1                         83                 if (b > 0) 
    53              1                         84                     out_r = b - 1; 
    54              1                    ***0***                 else 
    55              1                    ***0***                     out_r = b; 
    56              1                    ***0***             end
    57              1                    ***0***             ADD:      out_r = a + b;
    58              1                        166             ADD_c:    out_r = a + b + cin;
    59                                                       SUB:      out_r = a - b;
    60                                                       SUB_b:    out_r = a - b - cin;
    61              1                        862             AND:      out_r = a & b; 
    62                                                       OR:       out_r = a | b;
    63              1                        139             XOR:      out_r = a ^ b;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        72         4    94.73%

================================Toggle Details================================

Toggle Coverage for instance /alu_tb/DUT_G --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            a[0-3]           1           1                              100.00 
                                          alu[3-0]           1           1                              100.00 
                                            b[0-3]           1           1                              100.00 
                                             carry           1           1                              100.00 
                                               cin           1           1                              100.00 
                                               clk           1           1                              100.00 
                                          ctl[0-3]           1           1                              100.00 
                                            opcode               ENUM type       Value       Count 
                                                                       SEL          82      100.00 
                                                                       INC          84      100.00 
                                                                       DEC          84      100.00 
                                                                       ADD          83      100.00 
                                                                     ADD_c          84      100.00 
                                                                       SUB          83      100.00 
                                                                     SUB_b          83      100.00 
                                                                       AND          82      100.00 
                                                                        OR          83      100.00 
                                                                       XOR          83      100.00 
                                                                   SHIFT_L           0        0.00 
                                                                   SHIFT_R           0        0.00 
                                                                  ROTATE_L           0        0.00 
                                                                  ROTATE_R           0        0.00 
                                                                 invalid_1          83      100.00 
                                                                 invalid_2          83      100.00 
                                        out_r[4-0]           1           1                              100.00 
                                             reset           1           1                              100.00 
                                          valid_in           1           1                              100.00 
                                         valid_out           1           1                              100.00 
                                           valid_r           1           1                              100.00 
                                              zero           1           1                              100.00 
                                            zero_r           1           1                              100.00 

Total Node Count     =         46 
Toggled Node Count   =         42 
Untoggled Node Count =          4 

Toggle Coverage      =      94.73% (72 of 76 bins)

=================================================================================
=== Instance: /alu_tb
=== Design Unit: work.alu_tb
=================================================================================

Assertion Coverage:
    Assertions                      15         8         7    53.33%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alu_tb/assert__p_Valid_out_on
                     alu_tb.sv(196)                    75          1
/alu_tb/assert__p_Valid_out_off
                     alu_tb.sv(189)                   165          1
/alu_tb/assert__p_ZERO
                     alu_tb.sv(182)                   760          1
/alu_tb/assert__p_CARRY
                     alu_tb.sv(175)                   153          1
/alu_tb/assert__p_XOR
                     alu_tb.sv(131)                     0          1
/alu_tb/assert__p_OR alu_tb.sv(124)                     0          1
/alu_tb/assert__p_AND
                     alu_tb.sv(117)                     0          1
/alu_tb/assert__p_SUB_b
                     alu_tb.sv(110)                    69          0
/alu_tb/assert__p_SUB
                     alu_tb.sv(103)                    70          0
/alu_tb/assert__p_ADD_c
                     alu_tb.sv(96)                      0          1
/alu_tb/assert__p_ADD
                     alu_tb.sv(89)                      0          1
/alu_tb/assert__p_DEC
                     alu_tb.sv(82)                      0          1
/alu_tb/assert__p_INC
                     alu_tb.sv(75)                      0          1
/alu_tb/assert__p_SEL
                     alu_tb.sv(68)                     61          1
/alu_tb/#ublk#109295266#213/immed__214
                     alu_tb.sv(214)                     0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /alu_tb
NOTE: The modification timestamp for source file 'alu_tb.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu_tb.sv
------------------------------------IF Branch------------------------------------
    284                                     1001     Count coming in to IF
    284             1                        392     		if (alu_tb !== alu_g) begin
    288             1                         86     		else if (valid_out_tb !==valid_out_g) begin
    292             1                        136     		else if (zero_tb !== zero_g) begin
    296             1                        387             else begin
Branch totals: 4 hits of 4 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         3         0   100.00%

================================Condition Details================================

Condition Coverage for instance /alu_tb --
NOTE: The modification timestamp for source file 'alu_tb.sv' has been altered since compilation.

  File alu_tb.sv
----------------Focused Condition View-------------------
Line       284 Item    1  (alu_tb !== alu_g)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (alu_tb !== alu_g)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (alu_tb !== alu_g)_0  -                             
  Row   2:          1  (alu_tb !== alu_g)_1  -                             

----------------Focused Condition View-------------------
Line       288 Item    1  (valid_out_tb !== valid_out_g)
Condition totals: 1 of 1 input term covered = 100.00%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (valid_out_tb !== valid_out_g)         Y

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:          1  (valid_out_tb !== valid_out_g)_0  -                             
  Row   2:          1  (valid_out_tb !== valid_out_g)_1  -                             

----------------Focused Condition View-------------------
Line       292 Item    1  (zero_tb !== zero_g)
Condition totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (zero_tb !== zero_g)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (zero_tb !== zero_g)_0  -                             
  Row   2:          1  (zero_tb !== zero_g)_1  -                             



Directive Coverage:
    Directives                      14        12         2    85.71%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/alu_tb/cover__p_Valid_out_on            alu_tb Verilog  SVA  alu_tb.sv(197)   653 Covered   
/alu_tb/cover__p_Valid_out_off           alu_tb Verilog  SVA  alu_tb.sv(190)    85 Covered   
/alu_tb/cover__p_ZERO                    alu_tb Verilog  SVA  alu_tb.sv(183)   113 Covered   
/alu_tb/cover__p_CARRY                   alu_tb Verilog  SVA  alu_tb.sv(176)   288 Covered   
/alu_tb/cover__p_XOR                     alu_tb Verilog  SVA  alu_tb.sv(132)    72 Covered   
/alu_tb/cover__p_OR                      alu_tb Verilog  SVA  alu_tb.sv(125)    74 Covered   
/alu_tb/cover__p_AND                     alu_tb Verilog  SVA  alu_tb.sv(118)    74 Covered   
/alu_tb/cover__p_SUB_b                   alu_tb Verilog  SVA  alu_tb.sv(111)     0 ZERO      
/alu_tb/cover__p_SUB                     alu_tb Verilog  SVA  alu_tb.sv(104)     0 ZERO      
/alu_tb/cover__p_ADD_c                   alu_tb Verilog  SVA  alu_tb.sv(97)     76 Covered   
/alu_tb/cover__p_ADD                     alu_tb Verilog  SVA  alu_tb.sv(90)     72 Covered   
/alu_tb/cover__p_DEC                     alu_tb Verilog  SVA  alu_tb.sv(83)     75 Covered   
/alu_tb/cover__p_INC                     alu_tb Verilog  SVA  alu_tb.sv(76)     71 Covered   
/alu_tb/cover__p_SEL                     alu_tb Verilog  SVA  alu_tb.sv(69)     14 Covered   
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      64        64         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alu_tb --
NOTE: The modification timestamp for source file 'alu_tb.sv' has been altered since compilation.

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu_tb.sv
    8                                                module alu_tb();
    9                                                
    10                                               /////////////////////////////////////////////////////////
    11                                               ///////////////////// Parameters ////////////////////////
    12                                               /////////////////////////////////////////////////////////
    13                                               
    14                                               parameter CLOCK_PERIOD  = 10;
    15                                               
    16                                               /////////////////////////////////////////////////////////
    17                                               /////////// Testbench Signal Declaration ////////////////
    18                                               /////////////////////////////////////////////////////////
    19                                               
    20                                               logic       clk_tb, reset_tb, valid_in_tb, cin_tb, valid_out_tb, carry_tb, zero_tb;    
    21                                               logic [3:0] a_tb, b_tb, ctl_tb, alu_tb;     
    22                                               opcode_e    opcode_tb;
    23                                               
    24                                               logic       clk_g, reset_g, valid_in_g, cin_g, valid_out_g, carry_g, zero_g;    
    25                                               logic [3:0] a_g, b_g, ctl_g, alu_g;  
    26                                               opcode_e    opcode_g;
    27                                               
    28              1                        999     assign opcode_tb = opcode_e'(ctl_tb);
    29              1                        999     assign opcode_g  = opcode_e'(ctl_g);
    30                                               
    31                                               ////////////////////////////////////////////////////////
    32                                               ////////////////////// Counters ////////////////////////
    33                                               ////////////////////////////////////////////////////////
    34                                               
    35                                               integer correct_count, incorrect_count;
    36                                               
    37                                               ////////////////////////////////////////////////////////
    38                                               ////////////////////// Random Signals //////////////////
    39                                               ////////////////////////////////////////////////////////
    40                                               
    41                                               random_class RC;
    42                                               
    43                                               ////////////////////////////////////////////////////////
    44                                               /////////////////// DUT Instantation ///////////////////
    45                                               ////////////////////////////////////////////////////////
    46                                               
    47                                               alu DUT(clk_tb, reset_tb, valid_in_tb, a_tb, b_tb, cin_tb, ctl_tb, valid_out_tb, alu_tb, carry_tb, zero_tb);
    48                                               
    49                                               ////////////////////////////////////////////////////////
    50                                               ////////////////// Clock Generator  ////////////////////
    51                                               ////////////////////////////////////////////////////////
    52                                               
    53                                               //q1 inputs = new();//
    54                                               
    55              1                       2006     always #(CLOCK_PERIOD/2) clk_tb = ~clk_tb;
    55              2                       2005     
    56                                               
    57              1                       2006     always #(CLOCK_PERIOD/2) clk_g = ~clk_g;
    57              2                       2005     
    58                                               
    59                                               
    60                                               ////////////////////////////////////////////////////////
    61                                               ////////////////////// Assertions //////////////////////
    62                                               ////////////////////////////////////////////////////////
    63                                               
    64                                               property p_SEL;
    65                                                   @(posedge clk_tb) disable iff (!reset_tb)
    66                                                   valid_in_tb && ctl_tb == SEL |=> (alu_tb == $past(b_tb));
    67                                               endproperty
    68                                               assert property (p_SEL);
    69                                               cover property (p_SEL);
    70                                               
    71                                               property p_INC;
    72                                                   @(posedge clk_tb) disable iff (!reset_tb)
    73                                                   valid_in_tb && ctl_tb == INC |=> (alu_tb == ($past(b_tb) + 1)) ;
    74                                               endproperty
    75                                               assert property (p_INC);
    76                                               cover property (p_INC);
    77                                               
    78                                               property p_DEC;
    79                                                   @(posedge clk_tb) disable iff (!reset_tb)
    80                                                   valid_in_tb && ctl_tb == DEC |=> (alu_tb == ($past(b_tb) - 1)) ;
    81                                               endproperty
    82                                               assert property (p_DEC);
    83                                               cover property (p_DEC);
    84                                               
    85                                               property p_ADD;
    86                                                   @(posedge clk_tb) disable iff (!reset_tb)
    87                                                   valid_in_tb && ctl_tb == ADD |=> (alu_tb == ($past(a_tb) + $past(b_tb))) ;
    88                                               endproperty
    89                                               assert property (p_ADD);
    90                                               cover property (p_ADD);
    91                                               
    92                                               property p_ADD_c;
    93                                                   @(posedge clk_tb) disable iff (!reset_tb)
    94                                                   valid_in_tb && ctl_tb == ADD_c |=> (alu_tb == ($past(a_tb) + $past(b_tb) + $past(cin_tb))) ;
    95                                               endproperty
    96                                               assert property (p_ADD_c);
    97                                               cover property (p_ADD_c);
    98                                               
    99                                               property p_SUB;
    100                                                  @(posedge clk_tb) disable iff (!reset_tb)
    101                                                  valid_in_tb && ctl_tb == SUB |=> (alu_tb == ($past(a_tb) - $past(b_tb))) ;
    102                                              endproperty
    103                                              assert property (p_SUB);
    104                                              cover property (p_SUB);
    105                                              
    106                                              property p_SUB_b;
    107                                                  @(posedge clk_tb) disable iff (!reset_tb)
    108                                                  valid_in_tb && ctl_tb == SUB_b |=> (alu_tb == ($past(a_tb) - $past(b_tb) - $past(cin_tb))) ;
    109                                              endproperty
    110                                              assert property (p_SUB_b);
    111                                              cover property (p_SUB_b);
    112                                              
    113                                              property p_AND;
    114                                                  @(posedge clk_tb) disable iff (!reset_tb)
    115                                                  valid_in_tb && ctl_tb == AND |=> (alu_tb == ($past(a_tb) & $past(b_tb))) ;
    116                                              endproperty
    117                                              assert property (p_AND);
    118                                              cover property (p_AND);
    119                                              
    120                                              property p_OR;
    121                                                  @(posedge clk_tb) disable iff (!reset_tb)
    122                                                  valid_in_tb && ctl_tb == OR |=> (alu_tb == ($past(a_tb) | $past(b_tb))) ;
    123                                              endproperty
    124                                              assert property (p_OR);
    125                                              cover property (p_OR);
    126                                              
    127                                              property p_XOR;
    128                                                  @(posedge clk_tb) disable iff (!reset_tb)
    129                                                  valid_in_tb && ctl_tb == XOR |=> (alu_tb == ($past(a_tb) ^ $past(b_tb))) ;
    130                                              endproperty
    131                                              assert property (p_XOR);
    132                                              cover property (p_XOR);
    133                                              
    134                                              // property p_SHIFT_L;
    135                                              //     @(posedge clk_tb) disable iff (!reset_tb)
    136                                              //     valid_in_tb && ctl_tb == SHIFT_L |=> (alu_tb == ($past(a_tb) << 1)) && valid_out_tb;
    137                                              // endproperty
    138                                              // assert property (p_SHIFT_L);
    139                                              // cover property (p_SHIFT_L);
    140                                              
    141                                              // property p_SHIFT_R;
    142                                              //     @(posedge clk_tb) disable iff (!reset_tb)
    143                                              //     valid_in_tb && ctl_tb == SHIFT_R |=> (alu_tb == ($past(a_tb) >> 1)) && valid_out_tb;
    144                                              // endproperty
    145                                              // assert property (p_SHIFT_R);
    146                                              // cover property (p_SHIFT_R);
    147                                              
    148                                              // property p_ROTATE_L;
    149                                              //     @(posedge clk_tb) disable iff (!reset_tb)
    150                                              //     valid_in_tb && ctl_tb == ROTATE_L |=> (alu_tb == {$past(a_tb[2:0]), $past(a_tb[3])}) && valid_out_tb;
    151                                              // endproperty
    152                                              // assert property (p_ROTATE_L);
    153                                              // cover property (p_ROTATE_L);
    154                                              
    155                                              // property p_ROTATE_R;
    156                                              //     @(posedge clk_tb) disable iff (!reset_tb)
    157                                              //     valid_in_tb && ctl_tb == ROTATE_R |=> (alu_tb == {$past(a_tb[0]), $past(a_tb[3:1])}) && valid_out_tb;
    158                                              // endproperty
    159                                              // assert property (p_ROTATE_R);
    160                                              // cover property (p_ROTATE_R);
    161                                              
    162                                              // property p_CARRY;
    163                                              //     @(posedge clk_tb) disable iff (!reset_tb)
    164                                              //     valid_in_tb && (ctl_tb inside {ADD, ADD_c, SUB, SUB_b}) |=> 
    165                                              //     (carry_tb == ((ctl_tb == ADD || ctl_tb == ADD_c) ? 
    166                                              //                   (a_tb + b_tb + (ctl_tb == ADD_c ? cin_tb : 0)) >> $bits(alu_tb) :
    167                                              //                   (a_tb < (b_tb + (ctl_tb == SUB_b ? cin_tb : 0)))) &&
    168                                              //      valid_out_tb);
    169                                              // endproperty
    170                                              
    171                                              property p_CARRY;
    172                                                  @(posedge clk_tb) disable iff (!reset_tb)
    173                                                  valid_in_tb && !(ctl_tb inside {ADD, ADD_c, SUB, SUB_b, invalid_1, invalid_2}) |=> ~carry_tb;
    174                                              endproperty
    175                                              assert property (p_CARRY);
    176                                              cover property (p_CARRY);
    177                                              
    178                                              property p_ZERO;
    179                                                  @(posedge clk_tb) disable iff (!reset_tb)
    180                                                  valid_in_tb |=> zero_tb == (alu_tb == 4'b0);
    181                                              endproperty
    182                                              assert property (p_ZERO);
    183                                              cover property (p_ZERO);
    184                                              
    185                                              property p_Valid_out_off;
    186                                                  @(posedge clk_tb) disable iff (!reset_tb)
    187                                                  ~valid_in_tb || ((ctl_tb == invalid_1 || ctl_tb == invalid_2) && valid_in_tb) |=> ~valid_out_tb; 
    188                                              endproperty
    189                                              assert property (p_Valid_out_off);
    190                                              cover property (p_Valid_out_off);
    191                                              
    192                                              property p_Valid_out_on;
    193                                                  @(posedge clk_tb) disable iff (!reset_tb)
    194                                                  valid_in_tb && (ctl_tb != invalid_1 && ctl_tb != invalid_2) |=> valid_out_tb; 
    195                                              endproperty
    196                                              assert property (p_Valid_out_on);
    197                                              cover property (p_Valid_out_on);
    198                                              
    199                                              property p_Valid_in_off;
    200                                                  @(posedge clk_tb) disable iff (!reset_tb)
    201                                                  ~valid_in_tb |=> ($past(alu_tb) == $past(alu_tb,1) && $past(carry_tb) == $past(carry_tb,1) && ~valid_out_tb);
    202                                              endproperty
    203                                              
    204                                              ////////////////////////////////////////////////////////
    205                                              /////////// Applying Stimulus on Inputs //////////////// 
    206                                              ////////////////////////////////////////////////////////
    207                                              
    208                                              initial begin
    209             1                          1         RC = new();
    210             1                          1         initialize();
    211                                                  
    212                                                  // Random check
    213             1                       1000         repeat(1000) begin
    214                                                      assert (RC.randomize());
    215             1                       1000             reset_tb = RC.rst;
    216             1                       1000             reset_g = RC.rst;
    217             1                       1000             valid_in_tb = RC.valid_in;
    218             1                       1000             valid_in_g = RC.valid_in;
    219             1                       1000             cin_tb = RC.cin;
    220             1                       1000             cin_g = RC.cin;
    221             1                       1000             a_tb = RC.a;
    222             1                       1000             a_g = RC.a;
    223             1                       1000             b_tb = RC.b;
    224             1                       1000             b_g = RC.b;
    225             1                       1000             ctl_tb = RC.ctl;
    226             1                       1000             ctl_g = RC.ctl;
    227                                              
    228             1                       1000             RC.carry = carry_tb;
    229             1                       1000             RC.zero = zero_tb;
    230             1                       1000             RC.valid_out = valid_out_tb;
    231             1                       1000             RC.alu = alu_tb;
    232                                              
    233             1                       1000             RC.alu_cvr.sample();
    234             1                       1000             check_result();
    235                                              
    236                                                  end
    237                                              
    238             1                          1         $display("total number of errors = %d , total numbers of correct  = %d", incorrect_count, correct_count);
    239             1                          1         #5
    240             1                          1         $stop;
    241                                              end
    242                                              
    243                                              ////////////////////////////////////////////////////////
    244                                              /////////////////////// TASKS //////////////////////////
    245                                              ////////////////////////////////////////////////////////
    246                                              
    247                                              /////////////// Signals Initialization //////////////////
    248                                              
    249                                              task initialize;
    250                                                  begin
    251             1                          1             clk_tb = 1'b0;      clk_g = 1'b0;
    251             2                          1     
    252             1                          1             valid_in_tb = 1'b0; valid_in_g = 1'b0;
    252             2                          1     
    253             1                          1             cin_tb = 1'b0;      cin_g = 1'b0;
    253             2                          1     
    254             1                          1             a_tb = 4'b0;        a_g = 4'b0;
    254             2                          1     
    255             1                          1             b_tb = 4'b0;        b_g = 4'b0;
    255             2                          1     
    256             1                          1             ctl_tb = opcode_e'(4'b0000);      ctl_g = opcode_e'(4'b0000);
    256             2                          1     
    257                                              
    258             1                          1             correct_count = 32'b0; 
    259             1                          1             incorrect_count = 32'b0;
    260                                              
    261             1                          1             $display("Simulation started at time %0t", $time);
    262             1                          1             reset();
    263                                                  end
    264                                              endtask
    265                                              
    266                                              ///////////////////////// RESET /////////////////////////
    267                                              
    268                                              task reset;
    269                                                  begin
    270             1                          1             reset_tb = 1; reset_g = 1;
    270             2                          1     
    271             1                          1             @(negedge clk_tb)
    272             1                          1             reset_tb = 0; reset_g = 0;
    272             2                          1     
    273             1                          1             check_result();
    274             1                          1             reset_tb = 1; reset_g = 1;
    274             2                          1     
    275                                                  end
    276                                              endtask
    277                                              
    278                                              ////////////////// Check Result Response  ////////////////////
    279                                              
    280                                              task check_result();
    281                                                  begin
    282             1                       1001             @(negedge clk_tb)
    283             1                       1001     #1
    284                                              		if (alu_tb !== alu_g) begin
    285             1                        392     			$display("Incorrect alu!, %t", $time);
    286             1                        392     			incorrect_count = incorrect_count +1;
    287                                              		end	
    288                                              		else if (valid_out_tb !==valid_out_g) begin
    289             1                         86     			$display("Incorrect valid_out!, %t", $time);
    290             1                         86     			incorrect_count = incorrect_count +1;
    291                                              		end	
    292                                              		else if (zero_tb !== zero_g) begin
    293             1                        136     			$display("Incorrect zero flag!, %t", $time);
    294             1                        136     			incorrect_count = incorrect_count +1;
    295                                                      end
    296                                                      else begin
    297             1                        387     			$display("Correct result, %t", $time);	
    298             1                        387     			correct_count = correct_count +1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        252       152       100    60.31%

================================Toggle Details================================

Toggle Coverage for instance /alu_tb --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                          a_g[0-3]           1           1                              100.00 
                                         a_tb[0-3]           1           1                              100.00 
                                        alu_g[0-3]           1           1                              100.00 
                                       alu_tb[0-3]           1           1                              100.00 
                                          b_g[0-3]           1           1                              100.00 
                                         b_tb[0-3]           1           1                              100.00 
                                           carry_g           1           1                              100.00 
                                          carry_tb           1           1                              100.00 
                                             cin_g           1           1                              100.00 
                                            cin_tb           1           1                              100.00 
                                             clk_g           1           1                              100.00 
                                            clk_tb           1           1                              100.00 
                                correct_count[0-7]           1           1                              100.00 
                                  correct_count[8]           0           1                               50.00 
                               correct_count[9-31]           0           0                                0.00 
                                        ctl_g[0-3]           1           1                              100.00 
                                       ctl_tb[0-3]           1           1                              100.00 
                              incorrect_count[0-8]           1           1                              100.00 
                                incorrect_count[9]           0           1                               50.00 
                            incorrect_count[10-31]           0           0                                0.00 
                                          opcode_g               ENUM type       Value       Count 
                                                                       SEL          82      100.00 
                                                                       INC          84      100.00 
                                                                       DEC          84      100.00 
                                                                       ADD          83      100.00 
                                                                     ADD_c          84      100.00 
                                                                       SUB          83      100.00 
                                                                     SUB_b          83      100.00 
                                                                       AND          82      100.00 
                                                                        OR          83      100.00 
                                                                       XOR          83      100.00 
                                                                   SHIFT_L           0        0.00 
                                                                   SHIFT_R           0        0.00 
                                                                  ROTATE_L           0        0.00 
                                                                  ROTATE_R           0        0.00 
                                                                 invalid_1          83      100.00 
                                                                 invalid_2          83      100.00 
                                         opcode_tb               ENUM type       Value       Count 
                                                                       SEL          82      100.00 
                                                                       INC          84      100.00 
                                                                       DEC          84      100.00 
                                                                       ADD          83      100.00 
                                                                     ADD_c          84      100.00 
                                                                       SUB          83      100.00 
                                                                     SUB_b          83      100.00 
                                                                       AND          82      100.00 
                                                                        OR          83      100.00 
                                                                       XOR          83      100.00 
                                                                   SHIFT_L           0        0.00 
                                                                   SHIFT_R           0        0.00 
                                                                  ROTATE_L           0        0.00 
                                                                  ROTATE_R           0        0.00 
                                                                 invalid_1          83      100.00 
                                                                 invalid_2          83      100.00 
                                           reset_g           1           1                              100.00 
                                          reset_tb           1           1                              100.00 
                                        valid_in_g           1           1                              100.00 
                                       valid_in_tb           1           1                              100.00 
                                       valid_out_g           1           1                              100.00 
                                      valid_out_tb           1           1                              100.00 
                                            zero_g           1           1                              100.00 
                                           zero_tb           1           1                              100.00 

Total Node Count     =        142 
Toggled Node Count   =         87 
Untoggled Node Count =         55 

Toggle Coverage      =      60.31% (152 of 252 bins)

=================================================================================
=== Instance: /alu_pkg
=== Design Unit: work.alu_pkg
=================================================================================

Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses         13        na        na        na
            Covergroup Bins         53        53         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /alu_pkg/random_class/alu_cvr                   100.00%        100          -    Covered              
    covered/total bins:                                    53         53          -                      
    missing/total bins:                                     0         53          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rst_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin asserted                                       11          1          -    Covered              
        bin deasserted                                    989          1          -    Covered              
    Coverpoint cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin low                                           722          1          -    Covered              
        bin high                                          278          1          -    Covered              
    Coverpoint valid_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin valid_input                                   895          1          -    Covered              
        bin invalid_input                                 105          1          -    Covered              
    Coverpoint ctl_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                12         12          -                      
        missing/total bins:                                 0         12          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_ops[SEL]                                   83          1          -    Covered              
        bin all_ops[INC]                                   84          1          -    Covered              
        bin all_ops[DEC]                                   84          1          -    Covered              
        bin all_ops[ADD]                                   83          1          -    Covered              
        bin all_ops[ADD_c]                                 84          1          -    Covered              
        bin all_ops[SUB]                                   83          1          -    Covered              
        bin all_ops[SUB_b]                                 83          1          -    Covered              
        bin all_ops[AND]                                   83          1          -    Covered              
        bin all_ops[OR]                                    83          1          -    Covered              
        bin all_ops[XOR]                                   84          1          -    Covered              
        bin invalid_op[invalid_1]                          83          1          -    Covered              
        bin invalid_op[invalid_2]                          83          1          -    Covered              
    Coverpoint a_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin a_zero                                         98          1          -    Covered              
        bin a_ones                                        419          1          -    Covered              
        bin a_mid                                          74          1          -    Covered              
        bin a_walkingones[1]                               30          1          -    Covered              
        bin a_walkingones[2]                               22          1          -    Covered              
        bin a_walkingones[4]                               31          1          -    Covered              
        bin a_walkingones[8]                               42          1          -    Covered              
        default bin a_default                             326                     -    Occurred             
    Coverpoint b_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin b_zero                                        111          1          -    Covered              
        bin b_ones                                        340          1          -    Covered              
        bin b_mid                                          89          1          -    Covered              
        bin b_walkingones[1]                               37          1          -    Covered              
        bin b_walkingones[2]                               44          1          -    Covered              
        bin b_walkingones[4]                               42          1          -    Covered              
        bin b_walkingones[8]                               42          1          -    Covered              
        default bin b_default                             337                     -    Occurred             
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                10         10          -                      
        missing/total bins:                                 0         10          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin Bins_invalid                          166                     -    Occurred             
        bin Bins_arith[ADD]                                83          1          -    Covered              
        bin Bins_arith[ADD_c]                              84          1          -    Covered              
        bin Bins_arith[SUB]                                83          1          -    Covered              
        bin Bins_arith[SUB_b]                              83          1          -    Covered              
        bin Bins_B[SEL]                                    83          1          -    Covered              
        bin Bins_B[INC]                                    84          1          -    Covered              
        bin Bins_B[DEC]                                    84          1          -    Covered              
        bin Bins_bitwise[AND]                              83          1          -    Covered              
        bin Bins_bitwise[OR]                               83          1          -    Covered              
        bin Bins_bitwise[XOR]                              84          1          -    Covered              
        default bin opcode_default                          0                     -    ZERO                 
    Coverpoint carry_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin carry_0                                       851          1          -    Covered              
        bin carry_1                                       149          1          -    Covered              
    Coverpoint zero_cp                                100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin zero_set                                      745          1          -    Covered              
        bin zero_unset                                    255          1          -    Covered              
    Coverpoint valid_out_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin valid_cases                                   670          1          -    Covered              
        bin invalid_cases                                 172          1          -    Covered              
    Cross a_b_arith                                   100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin abop                                      113          1          -    Covered              
    Cross a_b_arithwc                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin abopwc                                     41          1          -    Covered              
    Cross a_b_bitwise                                 100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin ab_bitab                                    4          1          -    Covered              
            bin ab_bita                                    17          1          -    Covered              
            bin ab_bitb                                    23          1          -    Covered              
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alu_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File alu_pkg.sv
    1                                                package alu_pkg;
    2                                                
    3                                                typedef enum bit [3:0] {SEL, INC, DEC, ADD, ADD_c, SUB, SUB_b, AND, OR, XOR, SHIFT_L, SHIFT_R, ROTATE_L, ROTATE_R, invalid_1, invalid_2} opcode_e;
    4                                                
    5                                                    class random_class;
    6                                                        rand bit rst, cin,  valid_in;
    7                                                        rand bit [3:0] a,b;
    8                                                        randc opcode_e ctl;
    9                                                        bit carry, zero, valid_out;
    10                                                       bit [3:0] alu;
    11                                               
    12                                                       // constraint 1: Reset
    13                                                       constraint rst_c {
    14                                                           rst dist {0:/1, 1:/99};  //ALU_1
    15                                                       }
    16                                                       
    17                                                       // constraint 2: cin
    18                                                       constraint cin_c {
    19                                                           cin dist {0:/70, 1:/30};
    20                                                       }
    21                                                       
    22                                                       // Constraint 3: Control signal distribution
    23                                                       constraint opcode_c {
    24                                                           ctl inside {[SEL:XOR], [invalid_1:invalid_2]};
    25                                                       }
    26                                               
    27                                                       //constraint opcode_c {ctl dist {[SEL:XOR]:/90, [SHIFT_L:ROTATE_R]:/10};}
    28                                                       //constraint opcode_c {ctl dist {[SEL:XOR]:/90, [invalid_1:invalid_2]:/10};}
    29                                               
    30                                                       // Constraint 4: Valid_in
    31                                                       constraint valid_in_c {
    32                                                           valid_in dist {0:/10, 1:/90};
    33                                                       }
    34                                                       
    35                                                       // constraint 5
    36                                                       constraint a_b_c {
    37                                                           a dist {0:/10, [4'b0001:4'b1110]:/50, 4'b1111:/40};  // Allow 0 in 10% of cases   //ALU_2
    38                                                           b dist {0:/10, [4'b0001:4'b1110]:/50, 4'b1111:/40};  // Allow 0 in 10% of cases   //ALU_2 ALU_3
    39                                                       }
    40                                               
    41                                                       // constraint 6
    42                                                       constraint a_b_overflow {
    43                                                           if(ctl == SUB_b && cin)
    44                                                               a >= b + 1;
    45                                                           else if (ctl == SUB || ctl == SUB_b)  
    46                                                               a >= b;  
    47                                                           else if(ctl == INC)
    48                                                               b < 4'hF;
    49                                                           else if(ctl == DEC)
    50                                                               b > 4'b0;    
    51                                                       }
    52                                                       // COVERGROUP
    53                                                       covergroup alu_cvr;
    54                                                           // Coverpoint for Reset
    55                                                           rst_cp: coverpoint rst {
    56                                                               bins asserted = {0};  // Reset active
    57                                                               bins deasserted = {1}; // Reset inactive
    58                                                           }
    59                                                           
    60                                                           // Coverpoint for Carry-in signal
    61                                                           cin_cp: coverpoint cin {
    62                                                               bins low = {0};
    63                                                               bins high = {1};
    64                                                           }
    65                                               
    66                                                           // Coverpoint for Valid-in signal
    67                                                           valid_in_cp: coverpoint valid_in {
    68                                                               bins valid_input = {1};
    69                                                               bins invalid_input = {0};
    70                                                           }
    71                                                           
    72                                                           // Coverpoint for ALU control signal (ensure all operations are exercised)
    73                                                           ctl_cp: coverpoint ctl {
    74                                                               bins all_ops[] = {[SEL:XOR]}; // Cover all ALU operations
    75                                                               bins invalid_op[] = {[invalid_1:invalid_2]}; // Cover invalid operations
    76                                                           }
    77                                               
    78                                                           // Coverpoints for ALU input values (track different data patterns)
    79                                                           a_cp: coverpoint a {
    80                                                               bins a_zero = {4'b0000};          // Test zero input
    81                                                               bins a_ones = {4'b1111};          // Test all ones
    82                                                               bins a_mid = {[4'b0111:4'b1000]}; // Test middle range values
    83                                                               bins a_walkingones[] = {4'b0001,4'b0010,4'b0100,4'b1000};
    84                                                               bins a_default = default;          // Test other values
    85                                                           }
    86                                               
    87                                                           b_cp: coverpoint b {
    88                                                               bins b_zero = {4'b0000};          // Test zero input
    89                                                               bins b_ones = {4'b1111};          // Test all ones
    90                                                               bins b_mid = {[4'b0111:4'b1000]}; // Test middle range values
    91                                                               bins b_walkingones[] = {4'b0001, 4'b0010, 4'b0100, 4'b1000};
    92                                                               bins b_default = default;          // Test other values
    93                                                           }
    94                                               
    95                                                           // Coverpoint for ALU Operations
    96                                                           ALU_cp: coverpoint ctl {
    97                                                               // bins Bins_shift[] = {[SHIFT_L:ROTATE_R]};
    98                                                               bins Bins_arith[] = {[ADD:SUB_b]};
    99                                                               bins Bins_B[] = {[SEL:DEC]};
    100                                                              bins Bins_bitwise[] = {[AND:XOR]};
    101                                                              illegal_bins Bins_invalid = {[invalid_1:invalid_2]};
    102                                                              bins opcode_default = default;          // Test other values
    103                                                          }            
    104                                                          
    105                                                          // Coverpoint for Carry-out
    106                                                          carry_cp: coverpoint carry {
    107                                                              bins carry_0 = {0};
    108                                                              bins carry_1 = {1};
    109                                                          }
    110                                              
    111                                                          // Coverpoint for Zero flag
    112                                                          zero_cp: coverpoint zero {
    113                                                              bins zero_set = {1};
    114                                                              bins zero_unset = {0};
    115                                                          }
    116                                              
    117                                                          // Coverpoint for valid_out
    118                                                          valid_out_cp: coverpoint valid_out {
    119                                                              bins valid_cases = {1} iff(rst && valid_in && (ctl != invalid_1) && (ctl != invalid_1));
    120                                                              bins invalid_cases = {0};
    121                                                          }   
    122                                              
    123                                                          // Cross Coverage
    124                                                          a_b_arith: cross a_cp, b_cp, ALU_cp{
    125                                                              bins abop  = ( (binsof(a_cp.a_ones) || binsof(a_cp.a_zero)) &&  (binsof(b_cp.b_ones) || binsof(b_cp.b_zero)) && binsof(ALU_cp.Bins_arith));
    126                                                              option.cross_auto_bin_max = 0;
    127                                                          }  
    128                                                          a_b_arithwc: cross cin_cp, ALU_cp{
    129                                                              bins abopwc  = (binsof(cin_cp.high) && binsof(ALU_cp.Bins_arith) intersect{ADD_c, SUB_b});
    130                                                              option.cross_auto_bin_max = 0;
    131                                                          }
    132                                                          a_b_bitwise: cross a_cp, b_cp, ALU_cp{
    133                                                              bins ab_bitab = (binsof(ALU_cp.Bins_bitwise) && binsof(a_cp.a_walkingones) && binsof(b_cp.b_walkingones));
    134                                                              bins ab_bita = (binsof(ALU_cp.Bins_bitwise) && binsof(a_cp.a_walkingones));
    135                                                              bins ab_bitb = (binsof(ALU_cp.Bins_bitwise) && binsof(b_cp.b_walkingones));
    136                                                              option.cross_auto_bin_max = 0;
    137                                                          }
    138                                              
    139                                                      endgroup
    140                                              
    141                                                      function new();
    142             1                          1                 alu_cvr = new();


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /alu_pkg/random_class/alu_cvr                   100.00%        100          -    Covered              
    covered/total bins:                                    53         53          -                      
    missing/total bins:                                     0         53          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint rst_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin asserted                                       11          1          -    Covered              
        bin deasserted                                    989          1          -    Covered              
    Coverpoint cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin low                                           722          1          -    Covered              
        bin high                                          278          1          -    Covered              
    Coverpoint valid_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin valid_input                                   895          1          -    Covered              
        bin invalid_input                                 105          1          -    Covered              
    Coverpoint ctl_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                12         12          -                      
        missing/total bins:                                 0         12          -                      
        % Hit:                                        100.00%        100          -                      
        bin all_ops[SEL]                                   83          1          -    Covered              
        bin all_ops[INC]                                   84          1          -    Covered              
        bin all_ops[DEC]                                   84          1          -    Covered              
        bin all_ops[ADD]                                   83          1          -    Covered              
        bin all_ops[ADD_c]                                 84          1          -    Covered              
        bin all_ops[SUB]                                   83          1          -    Covered              
        bin all_ops[SUB_b]                                 83          1          -    Covered              
        bin all_ops[AND]                                   83          1          -    Covered              
        bin all_ops[OR]                                    83          1          -    Covered              
        bin all_ops[XOR]                                   84          1          -    Covered              
        bin invalid_op[invalid_1]                          83          1          -    Covered              
        bin invalid_op[invalid_2]                          83          1          -    Covered              
    Coverpoint a_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin a_zero                                         98          1          -    Covered              
        bin a_ones                                        419          1          -    Covered              
        bin a_mid                                          74          1          -    Covered              
        bin a_walkingones[1]                               30          1          -    Covered              
        bin a_walkingones[2]                               22          1          -    Covered              
        bin a_walkingones[4]                               31          1          -    Covered              
        bin a_walkingones[8]                               42          1          -    Covered              
        default bin a_default                             326                     -    Occurred             
    Coverpoint b_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        bin b_zero                                        111          1          -    Covered              
        bin b_ones                                        340          1          -    Covered              
        bin b_mid                                          89          1          -    Covered              
        bin b_walkingones[1]                               37          1          -    Covered              
        bin b_walkingones[2]                               44          1          -    Covered              
        bin b_walkingones[4]                               42          1          -    Covered              
        bin b_walkingones[8]                               42          1          -    Covered              
        default bin b_default                             337                     -    Occurred             
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                10         10          -                      
        missing/total bins:                                 0         10          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin Bins_invalid                          166                     -    Occurred             
        bin Bins_arith[ADD]                                83          1          -    Covered              
        bin Bins_arith[ADD_c]                              84          1          -    Covered              
        bin Bins_arith[SUB]                                83          1          -    Covered              
        bin Bins_arith[SUB_b]                              83          1          -    Covered              
        bin Bins_B[SEL]                                    83          1          -    Covered              
        bin Bins_B[INC]                                    84          1          -    Covered              
        bin Bins_B[DEC]                                    84          1          -    Covered              
        bin Bins_bitwise[AND]                              83          1          -    Covered              
        bin Bins_bitwise[OR]                               83          1          -    Covered              
        bin Bins_bitwise[XOR]                              84          1          -    Covered              
        default bin opcode_default                          0                     -    ZERO                 
    Coverpoint carry_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin carry_0                                       851          1          -    Covered              
        bin carry_1                                       149          1          -    Covered              
    Coverpoint zero_cp                                100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin zero_set                                      745          1          -    Covered              
        bin zero_unset                                    255          1          -    Covered              
    Coverpoint valid_out_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin valid_cases                                   670          1          -    Covered              
        bin invalid_cases                                 172          1          -    Covered              
    Cross a_b_arith                                   100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin abop                                      113          1          -    Covered              
    Cross a_b_arithwc                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin abopwc                                     41          1          -    Covered              
    Cross a_b_bitwise                                 100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin ab_bitab                                    4          1          -    Covered              
            bin ab_bita                                    17          1          -    Covered              
            bin ab_bitb                                    23          1          -    Covered              

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/alu_tb/cover__p_Valid_out_on            alu_tb Verilog  SVA  alu_tb.sv(197)   653 Covered   
/alu_tb/cover__p_Valid_out_off           alu_tb Verilog  SVA  alu_tb.sv(190)    85 Covered   
/alu_tb/cover__p_ZERO                    alu_tb Verilog  SVA  alu_tb.sv(183)   113 Covered   
/alu_tb/cover__p_CARRY                   alu_tb Verilog  SVA  alu_tb.sv(176)   288 Covered   
/alu_tb/cover__p_XOR                     alu_tb Verilog  SVA  alu_tb.sv(132)    72 Covered   
/alu_tb/cover__p_OR                      alu_tb Verilog  SVA  alu_tb.sv(125)    74 Covered   
/alu_tb/cover__p_AND                     alu_tb Verilog  SVA  alu_tb.sv(118)    74 Covered   
/alu_tb/cover__p_SUB_b                   alu_tb Verilog  SVA  alu_tb.sv(111)     0 ZERO      
/alu_tb/cover__p_SUB                     alu_tb Verilog  SVA  alu_tb.sv(104)     0 ZERO      
/alu_tb/cover__p_ADD_c                   alu_tb Verilog  SVA  alu_tb.sv(97)     76 Covered   
/alu_tb/cover__p_ADD                     alu_tb Verilog  SVA  alu_tb.sv(90)     72 Covered   
/alu_tb/cover__p_DEC                     alu_tb Verilog  SVA  alu_tb.sv(83)     75 Covered   
/alu_tb/cover__p_INC                     alu_tb Verilog  SVA  alu_tb.sv(76)     71 Covered   
/alu_tb/cover__p_SEL                     alu_tb Verilog  SVA  alu_tb.sv(69)     14 Covered   

TOTAL DIRECTIVE COVERAGE: 85.71%  COVERS: 14

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alu_tb/assert__p_Valid_out_on
                     alu_tb.sv(196)                    75          1
/alu_tb/assert__p_Valid_out_off
                     alu_tb.sv(189)                   165          1
/alu_tb/assert__p_ZERO
                     alu_tb.sv(182)                   760          1
/alu_tb/assert__p_CARRY
                     alu_tb.sv(175)                   153          1
/alu_tb/assert__p_XOR
                     alu_tb.sv(131)                     0          1
/alu_tb/assert__p_OR alu_tb.sv(124)                     0          1
/alu_tb/assert__p_AND
                     alu_tb.sv(117)                     0          1
/alu_tb/assert__p_SUB_b
                     alu_tb.sv(110)                    69          0
/alu_tb/assert__p_SUB
                     alu_tb.sv(103)                    70          0
/alu_tb/assert__p_ADD_c
                     alu_tb.sv(96)                      0          1
/alu_tb/assert__p_ADD
                     alu_tb.sv(89)                      0          1
/alu_tb/assert__p_DEC
                     alu_tb.sv(82)                      0          1
/alu_tb/assert__p_INC
                     alu_tb.sv(75)                      0          1
/alu_tb/assert__p_SEL
                     alu_tb.sv(68)                     61          1
/alu_tb/#ublk#109295266#213/immed__214
                     alu_tb.sv(214)                     0          1

Total Coverage By Instance (filtered view): 82.03%

